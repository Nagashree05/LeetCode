int strongPasswordChecker(char* password) {
    int n = strlen(password);
    int hasLower = 0, hasUpper = 0, hasDigit = 0;
    int replace = 0, oneMod = 0, twoMod = 0;
   
    for (int i = 0; i < n; i++) {
        if (islower(password[i])) hasLower = 1;
        if (isupper(password[i])) hasUpper = 1;
        if (isdigit(password[i])) hasDigit = 1;
    }
 
    for (int i = 0; i < n; ) {
        int j = i;
        while (i < n && password[i] == password[j]) i++;
        int length = i - j;
        if (length >= 3) {
            replace += length / 3;
            if (length % 3 == 0) oneMod++;
            else if (length % 3 == 1) twoMod++;
        }
    }
    
    int missingTypes = 3 - (hasLower + hasUpper + hasDigit);
    
    if (n < 6) {
        return fmax(missingTypes, 6 - n);
    } else if (n <= 20) {
        return fmax(missingTypes, replace);
    } else {
        int deleteCount = n - 20;
        int deleteOps = deleteCount;
   
        if (deleteCount > 0) {
            int minDeletes = fmin(deleteCount, oneMod);
            replace -= minDeletes;
            deleteCount -= minDeletes;
        }
        
        if (deleteCount > 0) {
            int minDeletes = fmin(deleteCount, twoMod * 2) / 2;
            replace -= minDeletes;
            deleteCount -= 2 * minDeletes;
        }
        
        if (deleteCount > 0) {
            replace -= deleteCount / 3;
        }
        
        return deleteOps + fmax(missingTypes, replace);
    }
}


